from django.db import models
import uuid

class Symbol(models.Model):
  id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
  symbol = models.CharField(max_length=20)
  name = models.CharField(max_length=300, default=None, blank=True, null=True)
  country = models.CharField(max_length=50, default=None, blank=True, null=True)
  exchange = models.CharField(max_length=100, default=None, blank=True, null=True)
  industry = models.CharField(max_length=200, default=None, blank=True, null=True)
  sector = models.CharField(max_length=100, default=None, blank=True, null=True)
  outstanding_shares = models.IntegerField(default=None, blank=True, null=True)
  created_at = models.DateTimeField(auto_now=True)
  deleted_at = models.DateTimeField(default=None, blank=True, null=True)
  updated_at = models.DateTimeField(auto_now=True)
  models.Index('symbol', name="symbol_idx")

class DailyPrice(models.Model):
  id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
  symbol = models.ForeignKey(Symbol, on_delete=models.CASCADE)
  date = models.DateTimeField('closing price date')
  open = models.FloatField(max_length=64)
  high = models.FloatField(max_length=64)
  low = models.FloatField(max_length=64)
  close = models.FloatField(max_length=64)
  volume = models.FloatField(max_length=64)
  dividends = models.FloatField(max_length=64)
  stock_splits = models.FloatField(max_length=64)
  created_at = models.DateTimeField(auto_now=True)
  deleted_at = models.DateTimeField(default=None, blank=True, null=True)
  updated_at = models.DateTimeField(auto_now=True)
  models.Index('symbol_id', name="symbol_id_idx")
  models.Index('date', name="date_idx")
  models.Index('close', name="close_idx")

class RSI(models.Model):
  id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
  symbol = models.ForeignKey(Symbol, on_delete=models.CASCADE)
  date = models.DateTimeField('closing price date')
  duration = models.IntegerField(default=None, blank=True, null=True)
  value = models.FloatField(max_length=64)
  created_at = models.DateTimeField(auto_now=True)
  deleted_at = models.DateTimeField(default=None, blank=True, null=True)
  updated_at = models.DateTimeField(auto_now=True)
  models.Index('symbol_id', name="symbol_id_idx")
  models.Index('date', name="date_idx")
  models.Index('duration', name="duration_idx")
  models.Index('value', name="value_idx")

class Volume(models.Model):
  id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
  symbol = models.ForeignKey(Symbol, on_delete=models.CASCADE)
  date = models.DateTimeField('closing price date')
  duration = models.IntegerField(default=None, blank=True, null=True)
  value = models.FloatField(max_length=64)
  created_at = models.DateTimeField(auto_now=True)
  deleted_at = models.DateTimeField(default=None, blank=True, null=True)
  updated_at = models.DateTimeField(auto_now=True)
  models.Index('symbol_id', name="symbol_id_idx")
  models.Index('date', name="date_idx")
  models.Index('duration', name="duration_idx")
  models.Index('value', name="value_idx")

class Performance(models.Model):
  id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
  symbol = models.ForeignKey(Symbol, on_delete=models.CASCADE)
  date = models.DateTimeField('closing price date')
  duration = models.IntegerField(default=None, blank=True, null=True)
  value = models.FloatField(max_length=64)
  created_at = models.DateTimeField(auto_now=True)
  deleted_at = models.DateTimeField(default=None, blank=True, null=True)
  updated_at = models.DateTimeField(auto_now=True)
  models.Index('symbol_id', name="symbol_id_idx")
  models.Index('date', name="date_idx")
  models.Index('duration', name="duration_idx")
  models.Index('value', name="value_idx")